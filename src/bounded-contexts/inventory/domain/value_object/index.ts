// Slot Value Object
export {
  AcceptanceResult,
  ItemTypeSchemas,
  SlotConstraintSchema,
  SlotError,
  // Schemas
  SlotIdSchema,
  SlotPositionSchema,
  SlotSchema,
  // Constructors
  SlotState,
  SlotStateSchema,
  StackSizeSchemas,
  addItem,
  canAcceptItem,
  clearSlot,
  createSlot,
  createSlotConstraint,
  // Operations
  createSlotId,
  getSlotType,
  isEmpty,
  isHotbar,
  isLocked,
  positionToSlotId,
  removeItem,
  slotIdToPosition,
  type AcceptanceResult,
  type Slot,
  type SlotConstraint,
  type SlotError,
  // Types
  type SlotId,
  type SlotState,
  type SlotType,
} from './slot'

// ItemId Value Object
export {
  CommonItemSchemas,
  // Constructors
  ItemCategory,
  ItemCategorySchema,
  ItemComparison,
  ItemIdError,
  ItemIdSchema,
  ItemNameSchema,
  ItemRarity,
  ItemRaritySchema,
  ItemSearchCriteriaSchema,
  ItemTagSchema,
  MinecraftItemIdSchema,
  ModItemIdSchema,
  // Schemas
  NamespaceSchema,
  compareItemIds,
  // Operations
  createItemId,
  createItemIdFromParts,
  createMinecraftItem,
  getDefaultRarity,
  getDisplayName,
  getItemName,
  getNamespace,
  inferCategory,
  isModItem,
  isVanillaItem,
  normalizeItemId,
  parseItemId,
  searchItems,
  validateItemId,
  validateItemIds,
  type ItemCategory,
  type ItemComparison,
  // Types
  type ItemId,
  type ItemIdError,
  type ItemName,
  type ItemRarity,
  type ItemSearchCriteria,
  type Namespace,
} from './item-id'

// StackSize Value Object
export {
  CategoryConstraintSchemas,
  MaxStackSizeSchema,
  // Constraints
  STACK_CONSTRAINTS,
  SpecialStackSchemas,
  SplitResultSchema,
  StackConstraintSchema,
  StackOperation,
  StackOperationResult,
  StackOperationResultSchema,
  StackOperationSchema,
  StackSizeError,
  // Schemas
  StackSizeSchema,
  StackStatsSchema,
  // Constructors
  StackabilityResult,
  StackabilityResultSchema,
  addToStack,
  calculateStackStats,
  canStack,
  compareStackSizes,
  createMaxStackSize,
  // Operations
  createStackSize,
  executeStackOperation,
  getAvailableCapacity,
  getDefaultStackConstraint,
  getItemsByCategory,
  getItemsByStackSize,
  getMaxStackSize,
  getStackConstraint,
  getStackConstraintStats,
  getStackableItems,
  isFull,
  isStackable,
  mergeMultipleStacks,
  mergeStacks,
  optimizeStacks,
  removeFromStack,
  splitIntoMultiple,
  splitStack,
  type MaxStackSize,
  type SplitResult,
  type StackConstraint,
  type StackOperation,
  type StackOperationResult,
  // Types
  type StackSize,
  type StackSizeError,
  type StackStats,
  type StackabilityResult,
} from './stack-size'

// ItemMetadata Value Object
export {
  CommonEnchantmentSchemas,
  CustomModelDataSchema,
  DisplayNameSchema,
  DisplaySchema,
  DurabilitySchema,
  EnchantmentEffect,
  EnchantmentEffectSchema,
  EnchantmentSchema,
  HideFlagsSchema,
  ItemCondition,
  ItemConditionSchema,
  ItemLoreSchema,
  ItemMetadataError,
  ItemMetadataSchema,
  MetadataComparison,
  MetadataOperation,
  // Constructors
  NBTTag,
  NBTTagSchema,
  // Schemas
  NBTTagTypeSchema,
  addEnchantment,
  calculateMetadataSize,
  compareMetadata,
  createCustomModelData,
  createDisplayName,
  createDurability,
  // Operations
  createEmptyMetadata,
  createEnchantment,
  createItemLore,
  createItemMetadata,
  damageDurability,
  executeMetadataOperation,
  getEnchantmentEffect,
  getItemCondition,
  getMaxEnchantmentLevel,
  isEnchantmentConflicting,
  removeCustomTag,
  removeEnchantment,
  repairDurability,
  setCustomTag,
  setDisplayName,
  setLore,
  setUnbreakable,
  updateDurability,
  type CustomModelData,
  type DisplayName,
  type Durability,
  type Enchantment,
  type EnchantmentEffect,
  type ItemCondition,
  type ItemLore,
  type ItemMetadata,
  type ItemMetadataError,
  type MetadataComparison,
  type MetadataOperation,
  type NBTTag,
  type NBTTagType,
  // Types
  type NBTValue,
} from './item-metadata'

// InventoryType Value Object
export {
  InventoryAccess,
  InventoryAccessSchema,
  InventoryCapacitySchema,
  InventoryCompatibility,
  InventoryCompatibilitySchema,
  InventoryFeature,
  InventoryFeatureSchema,
  InventoryLayoutSchema,
  InventorySize,
  InventorySizeSchema,
  InventoryStatsSchema,
  // Constructors
  InventoryType,
  InventoryTypeError,
  // Schemas
  InventoryTypeSchema,
  SpecificInventorySchemas,
  calculateCapacity,
  calculateInventoryStats,
  categorizeInventorySize,
  checkCompatibility,
  createChestInventory,
  createInventoryLayout,
  // Operations
  createInventoryType,
  createPlayerInventory,
  createShulkerBox,
  getLayoutDimensions,
  getTotalSlots,
  isPersistent,
  supportsFeature,
  type InventoryAccess,
  type InventoryCapacity,
  type InventoryCompatibility,
  type InventoryFeature,
  type InventoryLayout,
  type InventorySize,
  type InventoryStats,
  // Types
  type InventoryType,
  type InventoryTypeError,
} from './inventory-type'

// SlotPosition Value Object
export {
  AdjacentSlotsSchema,
  CoordinateConfigSchema,
  CoordinateTransform,
  CoordinateTransformSchema,
  // Schemas
  GridCoordinateSchema,
  GridOperationSchemas,
  SlotPattern,
  SlotPatternSchema,
  SlotPositionError,
  SlotRangeSchema,
  // Constructors
  SlotSection,
  SlotSectionSchema,
  SpecificSlotSchemas,
  TransformResult,
  TransformResultSchema,
  armorSlotToPosition,
  calculateDistance,
  createGridCoordinate,
  // Operations
  createSlotPosition,
  executeTransform,
  getAdjacentSlots,
  getAvailablePositions,
  getSlotPositionsInRange,
  getSlotRange,
  getSlotSection,
  gridToPosition,
  hotbarToPosition,
  isArmorSlot,
  isCornerSlot,
  isEdgeSlot,
  isHotbarSlot,
  isMainInventorySlot,
  isOffhandSlot,
  positionToArmorSlot,
  positionToGrid,
  positionToHotbar,
  sortPositions,
  sortPositionsDescending,
  type AdjacentSlots,
  type CoordinateConfig,
  type CoordinateTransform,
  type GridCoordinate,
  type SlotPattern,
  // Types
  type SlotPosition,
  type SlotPositionError,
  type SlotRange,
  type SlotSection,
  type TransformResult,
} from './slot-position'
