#!/usr/bin/env node

/**
 * GitHub Actions CI/CD Ëá™ÂãïË®≠ÂÆö„Ç≥„Éû„É≥„Éâ
 * ‰ΩøÁî®Ê≥ï: /github-setup [--type=web|lib|game]
 * Ê©üËÉΩ: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çø„Ç§„Éó„Å´Âøú„Åò„ÅüGitHub Actions„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíËá™ÂãïÁîüÊàê
 */

const fs = require('fs');
const path = require('path');

class GitHubSetup {
  constructor() {
    this.projectType = this.getProjectType();
    this.language = this.detectLanguage();
    this.packageManager = this.detectPackageManager();
    this.isTypeScript = this.detectTypeScript();
    this.hasTests = this.detectTestFramework();
  }

  getProjectType() {
    const typeArg = process.argv.find(arg => arg.startsWith('--type='));
    if (typeArg) {
      return typeArg.split('=')[1];
    }

    // Ëá™ÂãïÊ§úÂá∫
    if (fs.existsSync('package.json')) {
      const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));

      if (pkg.dependencies?.three || pkg.dependencies?.['@babylonjs/core']) {
        return 'game';
      } else if (pkg.dependencies?.react || pkg.dependencies?.vue || pkg.dependencies?.angular) {
        return 'web';
      } else if (pkg.main || pkg.exports) {
        return 'lib';
      }
    }

    return 'web'; // „Éá„Éï„Ç©„É´„Éà
  }

  detectLanguage() {
    if (fs.existsSync('package.json')) return 'javascript';
    if (fs.existsSync('pyproject.toml') || fs.existsSync('requirements.txt')) return 'python';
    if (fs.existsSync('Cargo.toml')) return 'rust';
    if (fs.existsSync('go.mod')) return 'go';
    return 'javascript';
  }

  detectPackageManager() {
    if (fs.existsSync('pnpm-lock.yaml')) return 'pnpm';
    if (fs.existsSync('yarn.lock')) return 'yarn';
    if (fs.existsSync('bun.lockb')) return 'bun';
    return 'npm';
  }

  detectTypeScript() {
    return fs.existsSync('tsconfig.json') ||
           (fs.existsSync('package.json') &&
            JSON.parse(fs.readFileSync('package.json', 'utf8')).devDependencies?.typescript);
  }

  detectTestFramework() {
    if (!fs.existsSync('package.json')) return false;

    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    return !!(pkg.dependencies?.jest || pkg.dependencies?.vitest ||
              pkg.devDependencies?.jest || pkg.devDependencies?.vitest ||
              pkg.scripts?.test);
  }

  async setup() {
    console.log(`üöÄ GitHub ActionsË®≠ÂÆöÈñãÂßã`);
    console.log(`üìä Ê§úÂá∫ÁµêÊûú: ${this.language}${this.isTypeScript ? ' + TypeScript' : ''} (${this.projectType})`);

    try {
      // .github/workflows „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
      if (!fs.existsSync('.github/workflows')) {
        fs.mkdirSync('.github/workflows', { recursive: true });
      }

      switch (this.language) {
        case 'javascript':
          await this.setupJavaScriptWorkflows();
          break;
        case 'python':
          await this.setupPythonWorkflows();
          break;
        case 'rust':
          await this.setupRustWorkflows();
          break;
        case 'go':
          await this.setupGoWorkflows();
          break;
      }

      await this.setupAdditionalWorkflows();

      console.log('\n‚úÖ GitHub ActionsË®≠ÂÆöÂÆå‰∫ÜÔºÅ');
      this.showNextSteps();

    } catch (error) {
      console.error('‚ùå „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error.message);
    }
  }

  async setupJavaScriptWorkflows() {
    // CI „ÉØ„Éº„ÇØ„Éï„É≠„Éº
    const ciWorkflow = this.generateCIWorkflow();
    fs.writeFileSync('.github/workflows/ci.yml', ciWorkflow);
    console.log('‚úÖ CI „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');

    // CD „ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÁîüÊàêÔºà„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çø„Ç§„Éó„Å´„Çà„ÇãÔºâ
    if (this.projectType === 'web' || this.projectType === 'game') {
      const cdWorkflow = this.generateCDWorkflow();
      fs.writeFileSync('.github/workflows/cd.yml', cdWorkflow);
      console.log('‚úÖ CD „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');
    }

    // „É©„Ç§„Éñ„É©„É™Áî®„ÅÆ„É™„É™„Éº„Çπ„ÉØ„Éº„ÇØ„Éï„É≠„Éº
    if (this.projectType === 'lib') {
      const releaseWorkflow = this.generateReleaseWorkflow();
      fs.writeFileSync('.github/workflows/release.yml', releaseWorkflow);
      console.log('‚úÖ Release „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');
    }
  }

  generateCIWorkflow() {
    const nodeVersions = ['18.x', '20.x'];
    const commands = this.generateCommands();

    return `name: CI - Code Quality & Testing

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: \${{ github.workflow }}-\${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [${nodeVersions.map(v => `'${v}'`).join(', ')}]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js \${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: \${{ matrix.node-version }}
        cache: '${this.packageManager}'

    - name: Install dependencies
      run: ${commands.install}

    ${this.isTypeScript ? `- name: TypeScript type check
      run: ${commands.typeCheck}
    ` : ''}

    - name: Lint check
      run: ${commands.lint}

    - name: Format check
      run: ${commands.formatCheck}

    ${this.hasTests ? `- name: Run tests
      run: ${commands.test}
    ` : ''}

    - name: Build application
      run: ${commands.build}

    ${this.hasTests ? `- name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        token: \${{ secrets.CODECOV_TOKEN }}
    ` : ''}`;
  }

  generateCDWorkflow() {
    const commands = this.generateCommands();

    return `name: CD - Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: '${this.packageManager}'

    - name: Install dependencies
      run: ${commands.install}

    - name: Run quality checks
      run: |
        ${this.isTypeScript ? commands.typeCheck : '# No TypeScript'}
        ${commands.lint}
        ${this.hasTests ? commands.test : '# No tests'}

    - name: Build ${this.projectType === 'game' ? 'Game' : 'Application'}
      run: ${commands.build}
      env:
        NODE_ENV: production

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload build artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    environment:
      name: github-pages
      url: \${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4`;
  }

  generateReleaseWorkflow() {
    const commands = this.generateCommands();

    return `name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: '${this.packageManager}'

    - name: Install dependencies
      run: ${commands.install}

    - name: Run quality checks
      run: |
        ${this.isTypeScript ? commands.typeCheck : '# No TypeScript'}
        ${commands.lint}
        ${this.hasTests ? commands.test : '# No tests'}

    - name: Build package
      run: ${commands.build}

    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: \${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: \${{ github.ref }}
        release_name: Release \${{ github.ref }}
        draft: false
        prerelease: false`;
  }

  async setupPythonWorkflows() {
    const ciWorkflow = `name: CI - Python

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python \${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: \${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: flake8 .

    - name: Format check with black
      run: black --check .

    - name: Sort imports check
      run: isort --check-only .

    - name: Type check with mypy
      run: mypy .

    - name: Test with pytest
      run: pytest --cov=src --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v4`;

    fs.writeFileSync('.github/workflows/ci.yml', ciWorkflow);
    console.log('‚úÖ Python CI „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');
  }

  async setupRustWorkflows() {
    const ciWorkflow = `name: CI - Rust

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy, rustfmt

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: cargo-registry-\${{ hashFiles('**/Cargo.lock') }}

    - name: Format check
      run: cargo fmt -- --check

    - name: Lint with clippy
      run: cargo clippy -- -D warnings

    - name: Run tests
      run: cargo test

    - name: Build
      run: cargo build --release`;

    fs.writeFileSync('.github/workflows/ci.yml', ciWorkflow);
    console.log('‚úÖ Rust CI „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');
  }

  async setupGoWorkflows() {
    const ciWorkflow = `name: CI - Go

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Format check
      run: gofmt -s -l .

    - name: Vet
      run: go vet ./...

    - name: Test
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v4

    - name: Build
      run: go build ./...`;

    fs.writeFileSync('.github/workflows/ci.yml', ciWorkflow);
    console.log('‚úÖ Go CI „ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');
  }

  async setupAdditionalWorkflows() {
    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
    const securityWorkflow = `name: Security Scan

on:
  schedule:
    - cron: '0 0 * * 0' # ÈÄ±Ê¨°
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'`;

    fs.writeFileSync('.github/workflows/security.yml', securityWorkflow);
    console.log('‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„ÉØ„Éº„ÇØ„Éï„É≠„Éº‰ΩúÊàêÂÆå‰∫Ü');

    // ‰æùÂ≠òÈñ¢‰øÇÊõ¥Êñ∞
    const dependabotConfig = `version: 2
updates:
  - package-ecosystem: "${this.language === 'javascript' ? 'npm' : this.language}"
    directory: "/"
    schedule:
      interval: "weekly"
    reviewers:
      - "@me"
    open-pull-requests-limit: 10`;

    if (!fs.existsSync('.github')) {
      fs.mkdirSync('.github');
    }
    fs.writeFileSync('.github/dependabot.yml', dependabotConfig);
    console.log('‚úÖ DependabotË®≠ÂÆöÂÆå‰∫Ü');
  }

  generateCommands() {
    const baseCmd = this.packageManager === 'npm' ? 'npm' :
                    this.packageManager === 'yarn' ? 'yarn' :
                    this.packageManager === 'pnpm' ? 'pnpm' : 'bun';

    return {
      install: this.packageManager === 'npm' ? 'npm ci' : `${baseCmd} install --frozen-lockfile`,
      build: `${baseCmd} run build`,
      test: `${baseCmd} run test`,
      typeCheck: `${baseCmd} run type-check`,
      lint: `${baseCmd} run lint`,
      formatCheck: `${baseCmd} run format:check`
    };
  }

  showNextSteps() {
    console.log('\nüéØ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:');
    console.log('1. GitHub „É™„Éù„Ç∏„Éà„É™„ÅÆ Settings > Pages „Åß„ÇΩ„Éº„Çπ„Çí "GitHub Actions" „Å´Ë®≠ÂÆö');
    console.log('2. GitHub „É™„Éù„Ç∏„Éà„É™„ÅÆ Settings > Secrets „ÅßÂøÖË¶Å„Å™„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÇíË®≠ÂÆö:');

    if (this.projectType === 'lib') {
      console.log('   - NPM_TOKEN (npm publishÁî®)');
    }

    console.log('   - CODECOV_TOKEN („Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„ÉàÁî®„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥)');
    console.log('3. „Ç≥„Éº„Éâ„Çípush„Åó„Å¶„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÂãï‰Ωú„ÇíÁ¢∫Ë™ç');

    console.log('\nüîó Èñ¢ÈÄ£„Ç≥„Éû„É≥„Éâ:');
    console.log('  /quality-setup - ÂìÅË≥™„ÉÑ„Éº„É´Ë®≠ÂÆö');
    console.log('  /deps-update - ‰æùÂ≠òÈñ¢‰øÇÊõ¥Êñ∞');
    console.log('  /project-analyze - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂàÜÊûê');
  }
}

// „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂÆüË°å
if (require.main === module) {
  new GitHubSetup().setup();
}

module.exports = { GitHubSetup };