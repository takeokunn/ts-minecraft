name: AI Agent Task
description: AI Coding Agent自動実行用 構造化タスク
title: "[TASK-ID] タスク名"
labels: ["ai-agent", "task", "execution-plan", "auto-executable"]
assignees: ["@me"]
body:
  - type: markdown
    attributes:
      value: |
        ## 🤖 AI Coding Agent自動実行タスク

        このテンプレートはClaude Agentが `claude "Issue #N を実装して"` で自動実行できる構造化タスクを作成します。

        **実行コマンド**: `claude "Issue #[番号] を実装して"`

        ### 📚 実装前必読ドキュメント
        AI Agentは実装開始前に以下のドキュメントを**必ず**参照してください：

        1. **[docs/how-to/development/README.md](../../../docs/how-to/development/README.md)** - 開発効率化実践ガイド
        2. **[DEVELOPMENT_WORKFLOW.md](../../../DEVELOPMENT_WORKFLOW.md)** - Issue実装中心ワークフロー
        3. **[docs/how-to/development/development-conventions.md](../../../docs/how-to/development/development-conventions.md)** - コーディング規約
        4. **[docs/tutorials/effect-ts-fundamentals/effect-ts-patterns.md](../../../docs/tutorials/effect-ts-fundamentals/effect-ts-patterns.md)** - Effect-TSパターン

        ### 🎯 8段階実行計画（必須）
        以下の順序で実装を進行してください：
        - **Step 1**: 事前調査・分析（既存コード・パターン確認）
        - **Step 2**: ディレクトリ構造作成
        - **Step 3**: 型定義・データ構造（Schema.Struct使用）
        - **Step 4**: Service実装（Effect-TS Service/Layerパターン）
        - **Step 5**: ECSシステム統合
        - **Step 6**: テスト実装（vitestでカバレッジ80%+）
        - **Step 7**: 統合・エクスポート
        - **Step 8**: 品質確認・最適化

        ### 🚀 品質基準（必須達成）
        - **TypeScript**: 型エラーゼロ
        - **Lint**: oxlint通過
        - **テストカバレッジ**: 80%以上
        - **Effect-TSパターン**: Service/Layer/Schema準拠
        - **パフォーマンステスト**: 実行時間検証

  - type: input
    id: task-id
    attributes:
      label: Task ID
      description: ROADMAPのタスクID (P0-001形式)
      placeholder: P0-001
    validations:
      required: true

  - type: dropdown
    id: complexity
    attributes:
      label: 実装複雑度
      description: AI Agentが判断する技術的複雑度
      options:
        - "1 - Very Simple (設定変更レベル)"
        - "2 - Simple (単純な関数実装)"
        - "3 - Easy (基本的な機能実装)"
        - "4 - Medium-Easy (複数ファイル実装)"
        - "5 - Medium (標準的な機能実装)"
        - "6 - Medium-Hard (複雑なロジック)"
        - "7 - Hard (アーキテクチャ変更)"
        - "8 - Very Hard (大規模リファクタリング)"
        - "9 - Expert (新技術・パターン導入)"
        - "10 - Extreme (フルスタック実装)"
    validations:
      required: true

  - type: dropdown
    id: ai-guidance
    attributes:
      label: AI実装ガイダンスレベル
      description: AI Agentが必要とする指示の詳細度
      options:
        - "Minimal - 基本要件のみ"
        - "Standard - 通常レベルの指示"
        - "Detailed - 詳細な実装指示"
        - "Expert - 高度な技術指示と制約"
    validations:
      required: true

  - type: textarea
    id: ai-context
    attributes:
      label: AI実装コンテキスト
      description: AI Agentが参照すべき具体的なドキュメントとパターンを指定
      placeholder: |
        ### 必読ドキュメント（実装開始前に必ず参照）
        - docs/how-to/development/README.md - 開発効率化ガイド
        - DEVELOPMENT_WORKFLOW.md - Issue駆動開発ワークフロー
        - docs/how-to/development/development-conventions.md - コーディング規約

        ### 実装パターン参照
        - docs/tutorials/effect-ts-fundamentals/effect-ts-patterns.md - Effect-TSパターン
        - src/shared/ - 実装済みコードパターン例

        ### 品質基準参照
        - docs/reference/quality/ - 品質基準とテスト要件
        - docs/how-to/testing/ - テスト実装ガイド
    validations:
      required: true

  - type: textarea
    id: execution-phases
    attributes:
      label: 実行ステップ（AI Agent自動実行用）
      description: Claude Agentが順次実行する8段階の詳細な実装ステップ
      placeholder: |
        ### Step 1: 事前調査・分析
        - [ ] docs/how-to/development/README.md を参照
        - [ ] DEVELOPMENT_WORKFLOW.md でワークフロー確認
        - [ ] 既存コードパターン調査（src/shared/内）
        - [ ] 関連Issue・PR履歴確認

        ### Step 2: ディレクトリ構造作成
        - [ ] 適切なディレクトリ配置決定
        - [ ] index.tsファイル作成
        - [ ] モジュール構造設計

        ### Step 3: 型定義・データ構造
        - [ ] Schema.Struct使用した型定義
        - [ ] Effect-TSパターンに準拠
        - [ ] バリデーション定義

        ### Step 4: Service実装
        - [ ] Effect-TS Service/Layerパターン実装
        - [ ] 依存性注入設計
        - [ ] エラーハンドリング実装

        ### Step 5: ECSシステム統合
        - [ ] システム間の連携実装
        - [ ] コンポーネント統合
        - [ ] イベント処理実装

        ### Step 6: テスト実装
        - [ ] vitestテストケース作成
        - [ ] カバレッジ80%以上達成
        - [ ] モックとスタブ実装

        ### Step 7: 統合・エクスポート
        - [ ] モジュールエクスポート整理
        - [ ] 他モジュールとの統合テスト
        - [ ] ドキュメント更新

        ### Step 8: 品質確認・最適化
        - [ ] TypeScript型チェック通過
        - [ ] oxlint実行・修正
        - [ ] パフォーマンス測定・最適化
        - [ ] 最終的な統合テスト実行
    validations:
      required: true

  - type: textarea
    id: success-criteria
    attributes:
      label: Acceptance Criteria（自動検証）
      description: Claude Agentが自動実行・検証する完了条件
      placeholder: |
        ### 🎯 必須達成基準
        - [ ] **TypeScript型チェック**: `pnpm type-check` エラーゼロ
        - [ ] **Lintチェック**: `pnpm lint` 通過
        - [ ] **テストカバレッジ**: `pnpm test:coverage` で80%以上
        - [ ] **ビルド成功**: `pnpm build` エラーなし
        - [ ] **Effect-TSパターン準拠**: Service/Layer/Schemaパターン使用

        ### 📊 品質基準
        - [ ] 全ての関数・メソッドにテストケース実装
        - [ ] エラーハンドリングの適切な実装
        - [ ] パフォーマンステストの実行・検証
        - [ ] ドキュメント更新（必要に応じて）

        ### 🔍 統合テスト
        - [ ] 他のシステムとの連携動作確認
        - [ ] ECSシステムとの統合動作確認
        - [ ] 既存機能への影響がないことを確認

        参照: docs/reference/quality/acceptance-criteria.md
    validations:
      required: true

  - type: textarea
    id: verification-commands
    attributes:
      label: 自動実行コマンドシーケンス
      description: Claude Agentが順次実行する検証コマンド（失敗時は自動修正試行）
      placeholder: |
        ### 🔧 品質チェックコマンド（並列実行）
        ```bash
        # TypeScript型チェック
        pnpm type-check

        # Lint実行・自動修正
        pnpm lint
        pnpm lint:fix

        # テスト実行・カバレッジ確認
        pnpm test
        pnpm test:coverage

        # ビルドテスト
        pnpm build
        ```

        ### 🚀 実装完了後の自動実行シーケンス
        ```bash
        # 1. 品質チェック（並列実行）
        pnpm type-check && pnpm lint && pnpm test:coverage

        # 2. ビルドテスト
        pnpm build

        # 3. パフォーマンステスト（該当する場合）
        pnpm test:performance

        # 4. 統合テスト
        pnpm test:integration
        ```

        ### 🔄 エラー時自動修正シーケンス
        ```bash
        # Lintエラー → 自動修正試行
        pnpm lint:fix

        # 型エラー → 該当コード確認・修正
        pnpm type-check --verbose

        # テスト失敗 → テストケース見直し
        pnpm test --reporter=verbose
        ```

        参照: docs/how-to/development/quality-checks.md
    validations:
      required: true


