name: AI エージェントタスク
description: Claude Agent自動実行用 構造化実装タスク
title: '[TASK-ID] タスク名'
labels: ['ai-agent', 'task', 'execution-plan', 'auto-executable', 'japanese']
assignees: ['@me']
body:
  - type: markdown
    attributes:
      value: |
        ## 🤖 Claude Agent 自動実行タスク

        このテンプレートはClaude Agentが段階的実装を自動実行できる構造化タスクです。

        **実行コマンド**:
        - `claude "Issue #[番号] を実装して"`
        - `claude "editorconfig lintを導入したい Issue を作って実装してPRまで作成して"` (ワンライナー)

        **自動実行内容**: Pre-Step → Step1-8段階実行 → Post-Step → PR自動作成

  - type: input
    id: task-id
    attributes:
      label: タスクID
      description: ROADMAPのタスクID (P0-001形式) またはフィーチャー名
      placeholder: P0-001
    validations:
      required: true

  - type: dropdown
    id: complexity
    attributes:
      label: 実装複雑度
      description: AI Agentが判断する技術的複雑度
      options:
        - '1 - Very Simple (設定変更レベル)'
        - '2 - Simple (単純な関数実装)'
        - '3 - Easy (基本的な機能実装)'
        - '4 - Medium-Easy (複数ファイル実装)'
        - '5 - Medium (標準的な機能実装)'
        - '6 - Medium-Hard (複雑なロジック)'
        - '7 - Hard (アーキテクチャ変更)'
        - '8 - Very Hard (大規模リファクタリング)'
        - '9 - Expert (新技術・パターン導入)'
        - '10 - Extreme (フルスタック実装)'
    validations:
      required: true

  - type: dropdown
    id: ai-guidance
    attributes:
      label: 実装ガイダンスレベル
      description: Claude Agentが必要とする指示の詳細度
      options:
        - 'Minimal - 基本要件のみ'
        - 'Standard - 通常レベルの指示'
        - 'Detailed - 詳細な実装指示'
        - 'Expert - 高度な技術指示と制約'
    validations:
      required: true

  - type: textarea
    id: ai-context
    attributes:
      label: 実装コンテキスト
      description: Claude Agentが参照すべきドキュメント（docs/）を指定
      placeholder: |
        参照: docs/reference/architecture/constraints.md
        参照: docs/how-to/development/development-conventions.md
    validations:
      required: true

  - type: dropdown
    id: context7-libraries
    attributes:
      label: 主要ライブラリ
      description: 実装で使用する主要ライブラリ（Context7で最新仕様確認）
      options:
        - 'Effect-TS (@effect/schema, @effect/platform など)'
        - 'Three.js (3D graphics)'
        - 'Vite (build tool)'
        - 'Vitest (testing)'
        - 'TypeScript (latest features)'
        - 'その他（実行ステップで明記）'
        - 'ライブラリ使用なし'
    validations:
      required: true

  - type: textarea
    id: docs-updates
    attributes:
      label: ドキュメント更新要件
      description: 実装完了後にdocs/へ追加すべき新しい仕様・パターン
      placeholder: |
        - 新しい実装パターンの記録 (docs/patterns/)
        - API仕様の更新 (docs/reference/)
        - 設定変更の記録 (docs/how-to/)
        - アーキテクチャ決定の記録 (docs/explanations/)
    validations:
      required: false

  - type: textarea
    id: execution-phases
    attributes:
      label: 実行ステップ（AI Agent自動実行用）
      description: Claude Agentが参照すべきドキュメントリンクと実行手順
      placeholder: |
        ## 🔄 実行フロー（8段階 + 前後処理）

        ### Pre-Step: 実装前確認
        1. `list_memories` - 既存実装パターン確認
        2. `@docs/` 設計方針・実装方針確認（指定ドキュメント必読）
        3. Context7でライブラリ最新仕様確認

        ### Step 1: 事前調査・分析
        - 既存コード調査・影響範囲分析
        - 参照: docs/how-to/development/analysis-phase.md

        ### Step 2: ディレクトリ構造作成
        - 必要なディレクトリ・ファイル作成
        - 参照: docs/reference/architecture/directory-structure.md

        ### Step 3: 型定義・データ構造
        - Schema・型定義作成
        - 参照: docs/tutorials/effect-ts-fundamentals/effect-ts-patterns.md

        ### Step 4: Service実装
        - サービス層・ビジネスロジック実装
        - 参照: docs/reference/patterns/service-layer-patterns.md

        ### Step 5: ECSシステム統合
        - Entity Component System統合
        - 参照: docs/reference/architecture/ecs-integration.md

        ### Step 6: テスト実装
        - 単体テスト・統合テスト作成
        - 参照: docs/how-to/testing/vitest-patterns.md

        ### Step 7: 統合・エクスポート
        - モジュール統合・公開API整備
        - 参照: docs/reference/patterns/module-exports.md

        ### Step 8: 品質確認・最適化
        - 型チェック・リント・ビルド確認
        - 参照: docs/how-to/development/quality-gates.md

        ### Post-Step: 実装後処理
        1. `@docs/` へ新パターン記録
        2. `write_memory` で重要パターン保存
        3. 品質確認コマンド実行
        4. **PR自動作成**: Issue完了後、Pull Request自動生成
    validations:
      required: true

  - type: textarea
    id: success-criteria
    attributes:
      label: 完了条件（自動検証）
      description: Claude Agentが自動実行・検証する完了条件
      placeholder: |
        ## ✅ 完了条件

        ### 機能要件
        - [ ] 実装機能が仕様通り動作する
        - [ ] 既存機能に影響を与えない
        - [ ] パフォーマンスの劣化がない

        ### 品質要件
        - [ ] TypeScript: エラー0件
        - [ ] ESLint: 警告0件
        - [ ] テストカバレッジ: 80%以上
        - [ ] ビルド: 正常に完了

        ### ドキュメント要件
        - [ ] 新パターンのdocs/記録完了
        - [ ] メモリ保存完了

        参照: docs/reference/quality/acceptance-criteria.md
    validations:
      required: true

  - type: textarea
    id: verification-commands
    attributes:
      label: 検証コマンド
      description: Claude Agentが順次実行する検証コマンド（失敗時は自動修正試行）
      placeholder: |
        ## 🔧 検証コマンド

        ### 品質チェック（並列実行）
        ```bash
        pnpm typecheck  # TypeScript型チェック
        pnpm format:check # フォーマットチェック
        pnpm test       # テスト実行
        pnpm build      # ビルド確認
        ```

        ### 個別確認（必要に応じて）
        ```bash
        pnpm dev        # 開発サーバー起動確認
        pnpm preview    # プロダクションビルド確認
        ```

        参照: docs/how-to/development/quality-checks.md
    validations:
      required: true

  - type: dropdown
    id: pr-auto-create
    attributes:
      label: PR自動作成設定
      description: Issue実装完了後のPull Request自動作成設定
      options:
        - '自動作成する - Issue完了後すぐにPR作成'
        - '手動作成 - 実装完了通知のみ'
      default: 0
    validations:
      required: true

  - type: textarea
    id: pr-template
    attributes:
      label: PR作成テンプレート
      description: 自動作成されるPull Requestの内容テンプレート
      placeholder: |
        ## 📌 PR概要
        - Closes #[Issue番号]
        - **Task ID**: [タスクID]
        - **実装内容**: [機能概要]

        ## 🎯 実装詳細
        - [主要な実装変更点]
        - [新しく追加されたパターン/API]
        - [アーキテクチャ変更点（あれば）]

        ## 🧪 品質確認
        - [x] pnpm typecheck - TypeScript型チェック完了
        - [x] pnpm format:check - フォーマットチェック完了
        - [x] pnpm test - テスト実行完了
        - [x] pnpm build - ビルド確認完了

        ## 📝 ドキュメント更新
        - [x] @docs/ 新パターン記録完了
        - [x] メモリ保存完了（重要パターン）

        ## 🔄 動作確認
        ```bash
        pnpm dev
        # → http://localhost:3000 で動作確認
        ```
      value: |
        ## 📌 PR概要
        - Closes #[Issue番号]
        - **Task ID**: [タスクID]
        - **実装内容**: [機能概要]

        ## 🎯 実装詳細
        - [主要な実装変更点]
        - [新しく追加されたパターン/API]
        - [アーキテクチャ変更点（あれば）]

        ## 🧪 品質確認
        - [x] pnpm typecheck - TypeScript型チェック完了
        - [x] pnpm format:check - フォーマットチェック完了
        - [x] pnpm test - テスト実行完了
        - [x] pnpm build - ビルド確認完了

        ## 📝 ドキュメント更新
        - [x] @docs/ 新パターン記録完了
        - [x] メモリ保存完了（重要パターン）

        ## 🔄 動作確認
        ```bash
        pnpm dev
        # → http://localhost:3000 で動作確認
        ```
    validations:
      required: false
