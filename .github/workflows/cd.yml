name: CD/Deploy Pipeline

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  PNPM_VERSION: 10
  NODE_VERSION: 20
  CACHE_VERSION: v2 # Updated for better caching
  CI: true
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Run CI pipeline first
  ci:
    uses: ./.github/workflows/ci.yml

  # Preview deployment for staging
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    environment:
      name: preview
      url: ${{ steps.preview.outputs.preview_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache handled by pnpm setup

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for preview
        run: |
          echo "VITE_BUILD_MODE=preview" >> $GITHUB_ENV
          pnpm build

      - name: Deploy to Preview Environment
        id: preview
        run: |
          echo "preview_url=https://preview-${{ github.sha }}.example.com" >> $GITHUB_OUTPUT
          echo "🚀 Preview deployed to preview environment"

  # Production build and staging deployment
  build-production:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [ci]
    timeout-minutes: 15
    outputs:
      build-time: ${{ steps.build-metrics.outputs.build-time }}
      bundle-size: ${{ steps.bundle-size.outputs.size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache handled by pnpm setup

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        id: build-metrics
        run: |
          BUILD_START=$(date +%s)
          echo "VITE_BUILD_MODE=production" >> $GITHUB_ENV
          pnpm build
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "build-time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "Build completed in ${BUILD_TIME}s"

      - name: Calculate final bundle size
        id: bundle-size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          echo "size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          echo "Final bundle size: $(numfmt --to=iec $BUNDLE_SIZE)B"

      - name: Generate build report
        run: |
          echo "📊 Build Report" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: ${{ steps.build-metrics.outputs.build-time }}s" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle Size: $(numfmt --to=iec ${{ steps.bundle-size.outputs.size }})B" >> $GITHUB_STEP_SUMMARY
          echo "- Node Version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 90

  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 5
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to Staging (GitHub Pages)
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Run smoke tests on staging
        run: |
          STAGING_URL="${{ steps.deployment.outputs.page_url }}"
          echo "Running comprehensive smoke tests on $STAGING_URL"

          # Basic connectivity test
          curl -f "$STAGING_URL" > /dev/null || exit 1
          echo "✅ Basic connectivity test passed"

          # Check if JavaScript bundles load properly
          if curl -s "$STAGING_URL" | grep -q "script.*\.js"; then
            echo "✅ JavaScript bundles detected"
          else
            echo "⚠️ No JavaScript bundles found - may indicate build issues"
          fi

          # Performance check - response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$STAGING_URL")
          echo "Response time: ${RESPONSE_TIME}s"

          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${RESPONSE_TIME}s"
          else
            echo "✅ Response time acceptable: ${RESPONSE_TIME}s"
          fi

          # Check HTTP status codes for critical paths
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL")
          if [ "$STATUS_CODE" = "200" ]; then
            echo "✅ HTTP status check passed (200)"
          else
            echo "❌ HTTP status check failed ($STATUS_CODE)"
            exit 1
          fi

          echo "✅ All staging smoke tests passed"

      - name: Notify deployment success
        run: |
          echo "🎉 Successfully deployed to staging" >> $GITHUB_STEP_SUMMARY
          echo "URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

  # Production deployment (only on releases)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, deploy-staging]
    if: github.event_name == 'release'
    timeout-minutes: 10
    environment:
      name: production
      url: https://production.example.com
    steps:
      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ github.sha }}

      - name: Deploy to Production CDN
        run: |
          echo "🚀 Deploying to production CDN..."
          # Add production deployment commands here
          echo "Production deployment completed"

      - name: Invalidate CDN Cache
        run: |
          echo "🔄 Invalidating CDN cache..."
          # Add cache invalidation commands here
          echo "Cache invalidation completed"

      - name: Run production health checks
        run: |
          echo "🏥 Running comprehensive production health checks..."

          PRODUCTION_URL="https://production.example.com"

          # Critical path availability check
          echo "Checking critical paths..."
          CRITICAL_PATHS=("/" "/api/health" "/assets/js" "/assets/css")

          for path in "${CRITICAL_PATHS[@]}"; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PRODUCTION_URL}${path}" || echo "000")
            if [[ "$STATUS" =~ ^[23][0-9][0-9]$ ]]; then
              echo "✅ $path: $STATUS"
            else
              echo "❌ $path: $STATUS (FAILED)"
              exit 1
            fi
          done

          # Performance health check
          echo "Checking performance metrics..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$PRODUCTION_URL")
          echo "Production response time: ${RESPONSE_TIME}s"

          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "❌ Production response time too slow: ${RESPONSE_TIME}s"
            exit 1
          fi

          # CDN cache check
          echo "Checking CDN cache headers..."
          CACHE_CONTROL=$(curl -s -I "$PRODUCTION_URL" | grep -i "cache-control" || echo "none")
          echo "Cache-Control: $CACHE_CONTROL"

          # SSL certificate check
          echo "Checking SSL certificate..."
          if curl -s -I "$PRODUCTION_URL" | grep -q "HTTP/2 200"; then
            echo "✅ SSL certificate and HTTP/2 working"
          else
            echo "⚠️ SSL or HTTP/2 issues detected"
          fi

          echo "✅ All production health checks passed"

      - name: Update deployment metrics
        run: |
          echo "📈 Updating deployment metrics..."
          echo "Deployment completed at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Release: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY

  # Post-deployment monitoring
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    timeout-minutes: 15
    steps:
      - name: Monitor deployment
        run: |
          echo "📊 Starting post-deployment monitoring..."
          # Add monitoring commands here
          sleep 60 # Wait for deployment to stabilize
          echo "✅ Monitoring completed - deployment is stable"

      - name: Generate deployment report
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build time**: ${{ needs.build-production.outputs.build-time }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle size**: $(numfmt --to=iec ${{ needs.build-production.outputs.bundle-size }})B" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
