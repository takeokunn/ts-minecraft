name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        id: typecheck
        run: pnpm typecheck
        continue-on-error: true

      - name: Run tests with coverage
        id: test-coverage
        run: pnpm test:coverage
        continue-on-error: true

      - name: Format check
        id: format-check
        run: pnpm format:check
        continue-on-error: true

      - name: EditorConfig check
        id: editorconfig
        run: pnpm editorconfig
        continue-on-error: true

      - name: Build project
        id: build
        run: pnpm build
        continue-on-error: true

      - name: Check bundle size
        id: bundle-size
        run: |
          echo "üì¶ Bundle Size Report"
          echo "===================="
          if [ -d "dist" ]; then
            find dist -type f -name "*.js" -o -name "*.css" | while read -r file; do
              size=$(du -h "$file" | cut -f1)
              echo "$file: $size"
            done
            echo "===================="
            total_size=$(du -sh dist | cut -f1)
            echo "Total Size: $total_size"
          else
            echo "No dist directory found"
          fi
        continue-on-error: true

      - name: Run actionlint
        id: actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: false
          filter_mode: nofilter
          level: error
        continue-on-error: true

      - name: Comment test results on PR
        uses: actions/github-script@v8
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÁµêÊûú„ÇíÂèéÈõÜ
            const stepResults = {
              typecheck: {
                name: 'TypeScript type checking',
                outcome: '${{ steps.typecheck.outcome }}',
                conclusion: '${{ steps.typecheck.conclusion }}'
              },
              'test-coverage': {
                name: 'Unit tests execution with coverage',
                outcome: '${{ steps.test-coverage.outcome }}',
                conclusion: '${{ steps.test-coverage.conclusion }}'
              },
              'format-check': {
                name: 'Code formatting check',
                outcome: '${{ steps.format-check.outcome }}',
                conclusion: '${{ steps.format-check.conclusion }}'
              },
              'editorconfig': {
                name: 'EditorConfig compliance check',
                outcome: '${{ steps.editorconfig.outcome }}',
                conclusion: '${{ steps.editorconfig.conclusion }}'
              },
              'build': {
                name: 'Build verification',
                outcome: '${{ steps.build.outcome }}',
                conclusion: '${{ steps.build.conclusion }}'
              },
              'bundle-size': {
                name: 'Bundle size analysis',
                outcome: '${{ steps.bundle-size.outcome }}',
                conclusion: '${{ steps.bundle-size.conclusion }}'
              },
              'actionlint': {
                name: 'GitHub Actions lint check',
                outcome: '${{ steps.actionlint.outcome }}',
                conclusion: '${{ steps.actionlint.conclusion }}'
              }
            };

            // ÁµêÊûú„ÇíËß£Êûê„Åó„Å¶ÊàêÂäü/Â§±Êïó„ÇíÂà§ÂÆö
            const passedSteps = [];
            const failedSteps = [];
            let overallSuccess = true;

            Object.entries(stepResults).forEach(([stepId, stepInfo]) => {
              const isSuccess = stepInfo.outcome === 'success' ||
                               (stepInfo.outcome === 'skipped' && stepInfo.conclusion === 'success');

              if (isSuccess) {
                passedSteps.push({ id: stepId, name: stepInfo.name });
              } else {
                failedSteps.push({
                  id: stepId,
                  name: stepInfo.name,
                  outcome: stepInfo.outcome,
                  conclusion: stepInfo.conclusion
                });
                overallSuccess = false;
              }
            });

            // „Ç´„Éê„É¨„ÉÉ„Ç∏„Çµ„Éû„É™„Éº„ÇíÂèñÂæóÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
            let coverageText = '';
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'coverage-summary.json');

            if (fs.existsSync(coveragePath)) {
              try {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;

                coverageText = `
            ## üìä Coverage Report

            | Type | Coverage |
            |------|----------|
            | Lines | ${total.lines.pct}% |
            | Statements | ${total.statements.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
                `;
              } catch (e) {
                console.log('Could not parse coverage summary');
              }
            }

            // „Ç≥„É°„É≥„ÉàÂÜÖÂÆπ„ÇíÂãïÁöÑ„Å´ÁîüÊàê
            const statusIcon = overallSuccess ? '‚úÖ' : '‚ùå';
            const statusText = overallSuccess ? 'All Checks Passed' : 'Some Checks Failed';

            let checksSection = '### üîç Check Results:\n';

            // ÊàêÂäü„Åó„Åü„Çπ„ÉÜ„ÉÉ„Éó
            passedSteps.forEach(step => {
              checksSection += `- ‚úÖ ${step.name}\n`;
            });

            // Â§±Êïó„Åó„Åü„Çπ„ÉÜ„ÉÉ„Éó
            failedSteps.forEach(step => {
              checksSection += `- ‚ùå ${step.name} (${step.outcome})\n`;
            });

            // Â§±ÊïóÊôÇ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
            let failureDetailsSection = '';
            if (failedSteps.length > 0) {
              failureDetailsSection = `
            ### ‚ùå Failure Details:

            ${failedSteps.map(step => `
            **${step.name}**
            - Status: ${step.outcome}
            - Conclusion: ${step.conclusion}
            - Step ID: \`${step.id}\``).join('\n')}

            #### üîß Troubleshooting Tips:
            `;

              failedSteps.forEach(step => {
                switch (step.id) {
                  case 'typecheck':
                    failureDetailsSection += `
            - **TypeScript Errors**: Run \`pnpm typecheck\` locally to see detailed type errors
            - Check for missing types, incorrect imports, or type mismatches`;
                    break;
                  case 'test-coverage':
                    failureDetailsSection += `
            - **Test Failures**: Run \`pnpm test:coverage\` locally to see failing tests
            - Check test logs for specific test cases that are failing`;
                    break;
                  case 'format-check':
                    failureDetailsSection += `
            - **Formatting Issues**: Run \`pnpm format\` to auto-fix formatting issues
            - Or run \`pnpm format:check\` to see what needs formatting`;
                    break;
                  case 'editorconfig':
                    failureDetailsSection += `
            - **EditorConfig Violations**: Check line endings, indentation, and file encoding
            - Ensure your editor respects .editorconfig settings`;
                    break;
                  case 'build':
                    failureDetailsSection += `
            - **Build Errors**: Run \`pnpm build\` locally to see compilation errors
            - Check for missing dependencies or configuration issues`;
                    break;
                  case 'bundle-size':
                    failureDetailsSection += `
            - **Bundle Analysis**: Check if build artifacts were generated correctly
            - Verify dist directory structure`;
                    break;
                  case 'actionlint':
                    failureDetailsSection += `
            - **GitHub Actions Issues**: Check workflow file syntax and structure
            - Ensure all required fields and proper YAML formatting`;
                    break;
                }
              });
            }

            const comment = `## ${statusIcon} PR Check Results

            ${statusText}

            ${checksSection}

            ${coverageText}

            ${failureDetailsSection}

            ### üìù Next Steps:
            ${overallSuccess
              ? 'All checks are passing! This PR is ready for review.'
              : `Please fix the failing checks before merging. ${failedSteps.length} check(s) failed.`
            }
            `;

            // Êó¢Â≠ò„ÅÆ„Éú„ÉÉ„Éà„Ç≥„É°„É≥„Éà„ÇíÊé¢„Åô
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Check Results')
            );

            if (botComment) {
              // Êó¢Â≠ò„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Êñ∞Ë¶è„Ç≥„É°„É≥„Éà„Çí‰ΩúÊàê
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

            // „Ç∏„Éß„Éñ„ÅÆÊúÄÁµÇ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíË®≠ÂÆö
            if (!overallSuccess) {
              core.setFailed(`${failedSteps.length} check(s) failed: ${failedSteps.map(s => s.name).join(', ')}`);
            }
