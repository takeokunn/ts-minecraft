name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm typecheck

      - name: Run tests
        run: pnpm test:coverage

      - name: Lint check
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: EditorConfig check
        run: pnpm editorconfig

      - name: Build check
        run: pnpm build

      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true
          filter_mode: nofilter
          level: error

      - name: Comment test results on PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // „Ç´„Éê„É¨„ÉÉ„Ç∏„Çµ„Éû„É™„Éº„ÇíÂèñÂæóÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
            let coverageText = '';
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'coverage-summary.json');

            if (fs.existsSync(coveragePath)) {
              try {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;

                coverageText = `
            ## üìä Coverage Report

            | Type | Coverage |
            |------|----------|
            | Lines | ${total.lines.pct}% |
            | Statements | ${total.statements.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
                `;
              } catch (e) {
                console.log('Could not parse coverage summary');
              }
            }

            const comment = `## ‚úÖ PR Check Results

            All checks have been completed for this PR.

            ### üîç Checks Performed:
            - ‚úÖ TypeScript type checking
            - ‚úÖ Unit tests execution
            - ‚úÖ Linting validation
            - ‚úÖ Code formatting check
            - ‚úÖ EditorConfig compliance check
            - ‚úÖ GitHub Actions lint check
            - ‚úÖ Build verification

            ${coverageText}

            ### üìù Next Steps:
            Please ensure all checks are passing before merging.
            `;

            // Êó¢Â≠ò„ÅÆ„Éú„ÉÉ„Éà„Ç≥„É°„É≥„Éà„ÇíÊé¢„Åô
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Check Results')
            );

            if (botComment) {
              // Êó¢Â≠ò„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Êñ∞Ë¶è„Ç≥„É°„É≥„Éà„Çí‰ΩúÊàê
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Check bundle size
        run: |
          echo "üì¶ Bundle Size Report"
          echo "===================="
          if [ -d "dist" ]; then
            find dist -type f -name "*.js" -o -name "*.css" | while read -r file; do
              size=$(du -h "$file" | cut -f1)
              echo "$file: $size"
            done
            echo "===================="
            total_size=$(du -sh dist | cut -f1)
            echo "Total Size: $total_size"
          else
            echo "No dist directory found"
          fi
