name: Automated Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      skip_ci:
        description: 'Skip CI checks'
        required: false
        default: false
        type: boolean

env:
  PNPM_VERSION: 10
  NODE_VERSION: 20
  CACHE_VERSION: v2
  CI: true
  NODE_OPTIONS: '--max-old-space-size=4096'

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  # Determine if a release should be created
  should-release:
    name: Determine Release Need
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for conventional commits
        id: check
        run: |
          # Check for conventional commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "Manual release triggered"
          else
            # Check for breaking changes, features, or fixes
            if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|!:)"; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "release-type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^feat(\(.*\))?:"; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "release-type=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^(fix|perf)(\(.*\))?:"; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "release-type=patch" >> $GITHUB_OUTPUT
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          fi

          # Calculate next version
          CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  # Run CI if not skipped
  ci:
    name: Run CI
    needs: [should-release]
    if: needs.should-release.outputs.should-release == 'true' && !inputs.skip_ci
    uses: ./.github/workflows/ci.yml

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [should-release, ci]
    if: needs.should-release.outputs.should-release == 'true' && (success() || inputs.skip_ci)
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      upload-url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Use Release Please for automated releases
      - name: Create Release
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: node
          package-name: ts-minecraft
          version-file: package.json
          changelog-sections: |
            [
              {"type": "feat", "section": "🚀 Features", "hidden": false},
              {"type": "fix", "section": "🐛 Bug Fixes", "hidden": false},
              {"type": "perf", "section": "⚡ Performance", "hidden": false},
              {"type": "refactor", "section": "♻️ Refactoring", "hidden": false},
              {"type": "docs", "section": "📚 Documentation", "hidden": false},
              {"type": "test", "section": "🧪 Tests", "hidden": false},
              {"type": "build", "section": "🔧 Build System", "hidden": false},
              {"type": "ci", "section": "⚙️ CI/CD", "hidden": false},
              {"type": "chore", "section": "🧹 Chores", "hidden": true}
            ]

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.release-created == 'true'
    strategy:
      fail-fast: false # Continue building other platforms if one fails
      matrix:
        platform: [web, desktop]
        include:
          - platform: web
            build-command: pnpm build:production
            artifact-path: dist
            quality-checks: true
          - platform: desktop
            build-command: pnpm build:desktop || pnpm build:production
            artifact-path: dist-desktop
            quality-checks: false
    outputs:
      web-build-size: ${{ steps.build-metrics.outputs.web-build-size }}
      desktop-build-size: ${{ steps.build-metrics.outputs.desktop-build-size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for ${{ matrix.platform }}
        id: build
        run: |
          BUILD_START=$(date +%s)
          echo "🔨 Building ${{ matrix.platform }} platform..."
          ${{ matrix.build-command }}
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "Build completed in ${BUILD_TIME}s"
          echo "build-time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Quality checks for ${{ matrix.platform }}
        if: matrix.quality-checks == true
        run: |
          echo "🔍 Running quality checks for ${{ matrix.platform }}..."

          # Bundle size check
          BUILD_SIZE=$(du -sb ${{ matrix.artifact-path }} | cut -f1)
          MAX_SIZE=10485760  # 10MB

          echo "Build size: $(numfmt --to=iec $BUILD_SIZE)B"

          if [ $BUILD_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Build size $(numfmt --to=iec $BUILD_SIZE)B exceeds maximum $(numfmt --to=iec $MAX_SIZE)B"
            exit 1
          fi

          # Check for essential files
          ESSENTIAL_FILES=("index.html" "assets")
          for file in "${ESSENTIAL_FILES[@]}"; do
            if [ -e "${{ matrix.artifact-path }}/$file" ]; then
              echo "✅ Essential file/directory found: $file"
            else
              echo "❌ Missing essential file/directory: $file"
              exit 1
            fi
          done

          # Check JavaScript minification
          if find ${{ matrix.artifact-path }}/assets -name "*.js" -exec grep -l "console.log\|debugger" {} \; | head -1; then
            echo "⚠️ Debug statements found in production build"
          else
            echo "✅ No debug statements in production build"
          fi

          echo "✅ All quality checks passed for ${{ matrix.platform }}"

      - name: Record build metrics
        id: build-metrics
        run: |
          BUILD_SIZE=$(du -sb ${{ matrix.artifact-path }} | cut -f1)
          echo "${{ matrix.platform }}-build-size=$BUILD_SIZE" >> $GITHUB_OUTPUT

          echo "📊 Build Metrics for ${{ matrix.platform }}:" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: ${{ steps.build.outputs.build-time }}s" >> $GITHUB_STEP_SUMMARY
          echo "- Build Size: $(numfmt --to=iec $BUILD_SIZE)B" >> $GITHUB_STEP_SUMMARY

      - name: Create platform archive
        run: |
          cd ${{ matrix.artifact-path }}
          tar -czf ../ts-minecraft-${{ matrix.platform }}-${{ needs.release.outputs.version }}.tar.gz .
          cd ..

          # Calculate archive size
          ARCHIVE_SIZE=$(du -sb ts-minecraft-${{ matrix.platform }}-${{ needs.release.outputs.version }}.tar.gz | cut -f1)
          echo "Archive size: $(numfmt --to=iec $ARCHIVE_SIZE)B"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload-url }}
          asset_path: ./ts-minecraft-${{ matrix.platform }}-${{ needs.release.outputs.version }}.tar.gz
          asset_name: ts-minecraft-${{ matrix.platform }}-${{ needs.release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload build artifacts for testing
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}-${{ needs.release.outputs.version }}
          path: ${{ matrix.artifact-path }}
          retention-days: 30

  # Publish to NPM (if package.json indicates it should be published)
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if package should be published
        id: should-publish
        run: |
          PRIVATE=$(node -p "require('./package.json').private" 2>/dev/null || echo "false")
          if [ "$PRIVATE" = "false" ]; then
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Build for NPM
        if: steps.should-publish.outputs.should-publish == 'true'
        run: pnpm build

      - name: Publish to NPM
        if: steps.should-publish.outputs.should-publish == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm publish --no-git-checks

  # Create Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to CDN and update documentation
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [release, build-release, publish-npm]
    if: needs.release.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy assets to CDN
        run: |
          echo "📦 Deploying assets to CDN..."
          # Add CDN deployment commands here
          echo "Assets deployed successfully"

      - name: Update documentation
        run: |
          echo "📚 Updating documentation..."
          # Add documentation update commands here
          echo "Documentation updated"

      - name: Notify team
        run: |
          echo "📢 Notifying team about new release..."
          # Add notification commands here (Slack, Discord, etc.)
          echo "Team notified"

      - name: Update release metrics
        run: |
          echo "📊 Updating release metrics..."
          echo "Release ${{ needs.release.outputs.version }} completed at $(date)" >> release-metrics.log
          # Add metrics collection here
          echo "Metrics updated"

  # Cleanup and maintenance
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [post-release]
    if: always()
    steps:
      - name: Clean up artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          # Add cleanup commands here
          echo "Cleanup completed"

      - name: Generate release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.release.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Released at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
