name: CI/CD Pipeline

on:
  workflow_call:
    outputs:
      coverage:
        description: 'Test coverage percentage'
        value: ${{ jobs.test.outputs.coverage }}
      bundle-size:
        description: 'Bundle size in bytes'
        value: ${{ jobs.build.outputs.bundle-size }}
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

env:
  PNPM_VERSION: 10
  NODE_VERSION: 20
  CACHE_VERSION: v2  # Updated cache version for better optimization
  CI: true
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Quality checks job - runs linting and type checking in parallel
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      lint-passed: ${{ steps.lint.outcome == 'success' }}
      typecheck-passed: ${{ steps.typecheck.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache handled by pnpm setup

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        id: lint
        run: pnpm lint

      - name: Run type checking
        id: typecheck
        run: pnpm tsc

      - name: Check for circular dependencies
        run: npx madge --circular --extensions ts,tsx src/

  # Test job - runs unit tests with coverage
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [18, 20, 22]
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage-percentage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # cache handled by pnpm setup

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:coverage --reporter=verbose

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(npx c8 report --reporter=json-summary | jq '.total.lines.pct')
          echo "coverage-percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Coverage quality gate
        run: |
          COVERAGE=${{ steps.coverage.outputs.coverage-percentage }}
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below 90% threshold"
            exit 1
          fi
          echo "‚úÖ Coverage $COVERAGE% meets the 90% threshold"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 20
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build job - builds the project and checks bundle size
  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]
    outputs:
      bundle-size: ${{ steps.bundle-size.outputs.size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache handled by pnpm setup

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Calculate bundle size
        id: bundle-size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          echo "size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          echo "Bundle size: $(numfmt --to=iec $BUNDLE_SIZE)B"

      - name: Bundle size quality gate
        run: |
          BUNDLE_SIZE=${{ steps.bundle-size.outputs.size }}
          MAX_SIZE=10485760  # 10MB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Bundle size $(numfmt --to=iec $BUNDLE_SIZE)B exceeds limit $(numfmt --to=iec $MAX_SIZE)B"
            exit 1
          fi
          echo "‚úÖ Bundle size $(numfmt --to=iec $BUNDLE_SIZE)B is within limit"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            public/
          retention-days: 30

  # Security scan job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Audit dependencies
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # E2E tests job
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Run E2E tests
        run: pnpm test:e2e
        if: hashFiles('e2e/**/*.spec.ts') != ''

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    outputs:
      benchmark-results: ${{ steps.benchmark.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Run performance benchmarks
        id: benchmark
        run: |
          echo "üìä Running performance benchmarks..."
          
          # Run custom performance tests if they exist
          if [ -f "scripts/performance-test.js" ]; then
            pnpm performance:test
          fi
          
          # Memory usage test
          MEMORY_BASELINE=500
          CURRENT_MEMORY=$(node -e "console.log(process.memoryUsage().heapUsed / 1024 / 1024)" | cut -d'.' -f1)
          
          echo "Memory usage: ${CURRENT_MEMORY}MB (baseline: ${MEMORY_BASELINE}MB)"
          
          if [ $CURRENT_MEMORY -gt $((MEMORY_BASELINE * 2)) ]; then
            echo "‚ùå Memory usage ${CURRENT_MEMORY}MB exceeds threshold"
            exit 1
          fi
          
          # Bundle load time simulation
          echo "Simulating bundle load time..."
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          LOAD_TIME=$((BUNDLE_SIZE / 1000000))  # Rough estimate in seconds
          
          echo "Estimated load time: ${LOAD_TIME}s"
          
          RESULTS="{\"memory\": $CURRENT_MEMORY, \"loadTime\": $LOAD_TIME, \"bundleSize\": $BUNDLE_SIZE}"
          echo "results=$RESULTS" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Performance tests completed"

      - name: Performance quality gate
        run: |
          echo "üìã Performance Quality Gate:"
          
          MEMORY=$(echo '${{ steps.benchmark.outputs.results }}' | jq -r '.memory')
          LOAD_TIME=$(echo '${{ steps.benchmark.outputs.results }}' | jq -r '.loadTime')
          
          echo "- Memory usage: ${MEMORY}MB (threshold: 1000MB)"
          echo "- Load time: ${LOAD_TIME}s (threshold: 10s)"
          
          if [ "$MEMORY" -gt 1000 ] || [ "$LOAD_TIME" -gt 10 ]; then
            echo "‚ùå Performance quality gate failed"
            exit 1
          fi
          
          echo "‚úÖ Performance quality gate passed"

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.sha }}
          path: |
            performance-*.json
            benchmark-*.log
          retention-days: 30
        continue-on-error: true

  # Summary job that aggregates all results
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, build, security, e2e, performance]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "CI Pipeline Summary:"
          echo "- Quality checks: ${{ needs.quality.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- E2E: ${{ needs.e2e.result }}"
          echo "- Performance: ${{ needs.performance.result }}"
          
          if [[ "${{ needs.quality.result }}" != "success" ]] || 
             [[ "${{ needs.test.result }}" != "success" ]] || 
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå CI Pipeline failed"
            exit 1
          fi
          echo "‚úÖ CI Pipeline passed"