name: CI/CD Monitoring & Metrics

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  PNPM_VERSION: 10
  NODE_VERSION: 20

jobs:
  # Collect CI/CD metrics
  metrics-collection:
    name: Collect CI/CD Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g octokit
          cat > collect-metrics.js << 'EOF'
          const { Octokit } = require("octokit");

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
          });

          async function collectMetrics() {
            const owner = process.env.GITHUB_REPOSITORY_OWNER;
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            
            // Get workflow runs for the last 30 days
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            
            const { data: workflowRuns } = await octokit.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              created: `>${thirtyDaysAgo.toISOString()}`,
              per_page: 100,
            });
            
            // Calculate metrics
            const totalRuns = workflowRuns.workflow_runs.length;
            const successfulRuns = workflowRuns.workflow_runs.filter(run => run.conclusion === 'success').length;
            const failedRuns = workflowRuns.workflow_runs.filter(run => run.conclusion === 'failure').length;
            const cancelledRuns = workflowRuns.workflow_runs.filter(run => run.conclusion === 'cancelled').length;
            
            const successRate = totalRuns > 0 ? (successfulRuns / totalRuns * 100).toFixed(2) : 0;
            const failureRate = totalRuns > 0 ? (failedRuns / totalRuns * 100).toFixed(2) : 0;
            
            // Calculate average duration
            const completedRuns = workflowRuns.workflow_runs.filter(run => 
              run.conclusion && run.created_at && run.updated_at
            );
            
            const totalDuration = completedRuns.reduce((acc, run) => {
              const start = new Date(run.created_at);
              const end = new Date(run.updated_at);
              return acc + (end - start);
            }, 0);
            
            const averageDuration = completedRuns.length > 0 
              ? Math.round(totalDuration / completedRuns.length / 1000 / 60) 
              : 0;
            
            // Get deployment frequency
            const deployments = workflowRuns.workflow_runs.filter(run => 
              run.name.toLowerCase().includes('deploy') || 
              run.name.toLowerCase().includes('cd')
            );
            
            const deploymentFrequency = deployments.length;
            
            const metrics = {
              period: '30 days',
              timestamp: new Date().toISOString(),
              totalRuns,
              successfulRuns,
              failedRuns,
              cancelledRuns,
              successRate: `${successRate}%`,
              failureRate: `${failureRate}%`,
              averageDuration: `${averageDuration} minutes`,
              deploymentFrequency,
              deploymentRate: `${(deploymentFrequency / 30).toFixed(1)} per day`
            };
            
            console.log('CI/CD Metrics (Last 30 Days):');
            console.log(JSON.stringify(metrics, null, 2));
            
            // Generate summary for GitHub Actions
            const summary = `## 📊 CI/CD Metrics Report

          **Reporting Period**: ${metrics.period}
          **Report Generated**: ${new Date().toLocaleString()}

          ### 🎯 Success Metrics
          - **Success Rate**: ${metrics.successRate}
          - **Total Runs**: ${metrics.totalRuns}
          - **Successful Runs**: ${metrics.successfulRuns}
          - **Average Duration**: ${metrics.averageDuration}

          ### ⚠️ Failure Metrics  
          - **Failure Rate**: ${metrics.failureRate}
          - **Failed Runs**: ${metrics.failedRuns}
          - **Cancelled Runs**: ${metrics.cancelledRuns}

          ### 🚀 Deployment Metrics
          - **Total Deployments**: ${metrics.deploymentFrequency}
          - **Deployment Rate**: ${metrics.deploymentRate}

          ### 🎯 Performance Targets
          - ✅ Success Rate Target: >95% (Current: ${metrics.successRate})
          - ✅ Average Duration Target: <5min (Current: ${metrics.averageDuration})
          - ✅ Daily Deployments Target: >1 (Current: ${metrics.deploymentRate})
          `;

            require('fs').writeFileSync('metrics-summary.md', summary);
          }

          collectMetrics().catch(console.error);
          EOF

      - name: Collect workflow metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node collect-metrics.js

      - name: Display metrics summary
        run: cat metrics-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: ci-cd-metrics-${{ github.run_number }}
          path: metrics-summary.md

  # Repository health check
  repository-health:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: |
          echo "## 📦 Dependency Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for outdated packages
          OUTDATED=$(pnpm outdated --format json 2>/dev/null || echo '{}')

          if [ "$OUTDATED" = "{}" ]; then
            echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Outdated packages detected:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo "$OUTDATED" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY

          if pnpm audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
            AUDIT_COUNT=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
            echo "- **Total vulnerabilities**: $AUDIT_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check bundle size trends
        run: |
          pnpm build

          CURRENT_SIZE=$(du -sb dist | cut -f1)

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Size**: $(numfmt --to=iec $CURRENT_SIZE)B" >> $GITHUB_STEP_SUMMARY
          echo "- **Size Limit**: 10MB" >> $GITHUB_STEP_SUMMARY

          USAGE_PERCENT=$(($CURRENT_SIZE * 100 / 10485760))
          echo "- **Usage**: ${USAGE_PERCENT}%" >> $GITHUB_STEP_SUMMARY

          if [ $USAGE_PERCENT -gt 80 ]; then
            echo "⚠️ Bundle size is approaching the limit!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Bundle size is within acceptable limits" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate repository health score
        run: |
          SCORE=100

          # Deduct points for issues
          if [ -f audit-results.json ]; then
            VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
            SCORE=$((SCORE - VULNS * 5))
          fi

          # Check test coverage (if available)
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct' 2>/dev/null || echo "0")
            if [ $(echo "$COVERAGE < 90" | bc -l) ]; then
              SCORE=$((SCORE - 10))
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏆 Repository Health Score" >> $GITHUB_STEP_SUMMARY
          echo "**Score**: $SCORE/100" >> $GITHUB_STEP_SUMMARY

          if [ $SCORE -ge 90 ]; then
            echo "🎉 Excellent repository health!" >> $GITHUB_STEP_SUMMARY
          elif [ $SCORE -ge 70 ]; then
            echo "👍 Good repository health with room for improvement" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Repository needs attention" >> $GITHUB_STEP_SUMMARY
          fi

  # Performance trends analysis
  performance-trends:
    name: Performance Trends Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download recent performance reports
        uses: actions/download-artifact@v4
        with:
          pattern: 'performance-report-*'
          merge-multiple: true
        continue-on-error: true

      - name: Generate current performance baseline
        run: |
          echo "📊 Generating current performance baseline..."

          # Build current version
          pnpm build

          # Calculate current metrics
          CURRENT_BUNDLE_SIZE=$(du -sb dist | cut -f1)

          # Simulate load time test
          LOAD_START=$(date +%s%3N)
          # Simulate typical operations
          node -e "
            const start = Date.now();
            // Simulate typical app initialization
            setTimeout(() => {
              console.log(Date.now() - start);
            }, 100);
          " > load_time.txt 2>/dev/null || echo "100" > load_time.txt
          LOAD_TIME=$(cat load_time.txt)

          # Memory usage simulation
          MEMORY_USAGE=$(node -e "console.log(Math.floor(process.memoryUsage().heapUsed / 1024 / 1024))")

          # Create performance baseline
          cat > current-performance.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "bundleSize": $CURRENT_BUNDLE_SIZE,
            "loadTime": $LOAD_TIME,
            "memoryUsage": $MEMORY_USAGE,
            "commit": "${{ github.sha }}"
          }
          EOF

          echo "Current performance metrics:"
          echo "- Bundle Size: $(numfmt --to=iec $CURRENT_BUNDLE_SIZE)B"
          echo "- Load Time: ${LOAD_TIME}ms"
          echo "- Memory Usage: ${MEMORY_USAGE}MB"

      - name: Analyze performance trends
        run: |
          echo "## 📈 Performance Trends Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count available performance reports
          REPORT_COUNT=$(ls performance-report-*.json 2>/dev/null | wc -l)
          CURRENT_BUNDLE_SIZE=$(jq -r '.bundleSize' current-performance.json)
          CURRENT_LOAD_TIME=$(jq -r '.loadTime' current-performance.json)
          CURRENT_MEMORY=$(jq -r '.memoryUsage' current-performance.json)

          echo "### 🎯 Current Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: $(numfmt --to=iec $CURRENT_BUNDLE_SIZE)B" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Time**: ${CURRENT_LOAD_TIME}ms" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory Usage**: ${CURRENT_MEMORY}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $REPORT_COUNT -eq 0 ]; then
            echo "ℹ️ No historical performance reports available for comparison" >> $GITHUB_STEP_SUMMARY
          else
            echo "📊 Analyzing $REPORT_COUNT historical performance reports" >> $GITHUB_STEP_SUMMARY
            
            # Performance regression detection
            echo "### 🔍 Performance Regression Analysis" >> $GITHUB_STEP_SUMMARY
            
            # Bundle size trend (simplified)
            if [ $CURRENT_BUNDLE_SIZE -gt 8388608 ]; then  # 8MB threshold
              echo "⚠️ **Bundle Size Warning**: Current size approaching limit" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Bundle Size**: Within acceptable limits" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Load time analysis
            if [ $CURRENT_LOAD_TIME -gt 5000 ]; then  # 5s threshold
              echo "⚠️ **Load Time Warning**: Exceeds 5 second threshold" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Load Time**: Within acceptable limits" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Memory usage analysis
            if [ $CURRENT_MEMORY -gt 1000 ]; then  # 1GB threshold
              echo "⚠️ **Memory Usage Warning**: High memory consumption" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Memory Usage**: Within acceptable limits" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Recommendations" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor bundle size growth with each release" >> $GITHUB_STEP_SUMMARY
            echo "- Implement code splitting for large bundles" >> $GITHUB_STEP_SUMMARY
            echo "- Consider lazy loading for non-critical features" >> $GITHUB_STEP_SUMMARY
            echo "- Regular performance profiling in development" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload performance baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline-${{ github.run_number }}
          path: current-performance.json
          retention-days: 90

  # Generate comprehensive report
  generate-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [metrics-collection, repository-health, performance-trends]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate comprehensive report
        run: |
          echo "# 📊 Weekly CI/CD Health Report" > comprehensive-report.md
          echo "" >> comprehensive-report.md
          echo "**Generated**: $(date)" >> comprehensive-report.md
          echo "**Repository**: ${{ github.repository }}" >> comprehensive-report.md
          echo "" >> comprehensive-report.md

          echo "## 📋 Executive Summary" >> comprehensive-report.md
          echo "" >> comprehensive-report.md
          echo "- **Metrics Collection**: ${{ needs.metrics-collection.result }}" >> comprehensive-report.md
          echo "- **Repository Health**: ${{ needs.repository-health.result }}" >> comprehensive-report.md
          echo "- **Performance Trends**: ${{ needs.performance-trends.result }}" >> comprehensive-report.md
          echo "" >> comprehensive-report.md

          # Include detailed reports if available
          if [ -f metrics-summary.md ]; then
            echo "## Detailed Metrics" >> comprehensive-report.md
            cat metrics-summary.md >> comprehensive-report.md
            echo "" >> comprehensive-report.md
          fi

          echo "## 🎯 Action Items" >> comprehensive-report.md
          echo "" >> comprehensive-report.md
          echo "- [ ] Review failed workflow runs" >> comprehensive-report.md
          echo "- [ ] Update outdated dependencies" >> comprehensive-report.md
          echo "- [ ] Address security vulnerabilities" >> comprehensive-report.md
          echo "- [ ] Monitor bundle size growth" >> comprehensive-report.md
          echo "- [ ] Optimize slow-running jobs" >> comprehensive-report.md

          echo "---" >> comprehensive-report.md
          echo "*Report generated automatically by GitHub Actions*" >> comprehensive-report.md

      - name: Display comprehensive report
        run: cat comprehensive-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-health-report-${{ github.run_number }}
          path: comprehensive-report.md
          retention-days: 90
